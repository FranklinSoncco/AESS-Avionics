#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>

Adafruit_MPU6050 mpu;
Adafruit_BMP280 bmp; // Dirección I2C por defecto 0x76

void setup() {
  Serial.begin(115200);
  while (!Serial) delay(10);

  Wire.begin(21, 22); // SDA: GPIO 21, SCL: GPIO 22

  // Inicializar MPU6050
  if (!mpu.begin()) {
    Serial.println("No se encontró MPU6050");
    while (1) delay(10);
  }
  Serial.println("MPU6050 conectado");
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  // Inicializar BMP280
  if (!bmp.begin(0x76)) {
    Serial.println("No se encontró BMP280 en 0x76, intentando 0x77...");
    if (!bmp.begin(0x77)) {
      Serial.println("No se encontró BMP280 en 0x77");
      while (1) delay(10);
    }
  }
  Serial.println("BMP280 conectado");

  // Enviar encabezado del CSV
  Serial.println("Timestamp,AccelX,AccelY,AccelZ,GyroX,GyroY,GyroZ,TempMPU,Pitch,Roll,TempBMP,Pressure");
}

void loop() {
  // Leer datos del MPU6050
  sensors_event_t a, g, temp_mpu;
  mpu.getEvent(&a, &g, &temp_mpu);

  // Leer datos del BMP280
  float temp_bmp = bmp.readTemperature();
  float pressure = bmp.readPressure() / 100.0; // Convertir a hPa

  // Calcular ángulos de inclinación (en grados)
  float pitch = atan2(-a.acceleration.x, sqrt(a.acceleration.y * a.acceleration.y + a.acceleration.z * a.acceleration.z)) * 180.0 / PI;
  float roll = atan2(a.acceleration.y, a.acceleration.z) * 180.0 / PI;

  // Imprimir datos en Serial cada segundo (para monitoreo)
  Serial.print("MPU6050 - Accel (m/s^2): X=");
  Serial.print(a.acceleration.x);
  Serial.print(", Y=");
  Serial.print(a.acceleration.y);
  Serial.print(", Z=");
  Serial.print(a.acceleration.z);
  Serial.print(" | Gyro (deg/s): X=");
  Serial.print(g.gyro.x);
  Serial.print(", Y=");
  Serial.print(g.gyro.y);
  Serial.print(", Z=");
  Serial.print(g.gyro.z);
  Serial.print(" | Temp=");
  Serial.print(temp_mpu.temperature);
  Serial.println(" °C");
  Serial.print("Inclinacion - Pitch=");
  Serial.print(pitch);
  Serial.print("°, Roll=");
  Serial.print(roll);
  Serial.println("°");
  Serial.print("BMP280 - Temp=");
  Serial.print(temp_bmp);
  Serial.print(" °C, Pressure=");
  Serial.print(pressure);
  Serial.println(" hPa");
  Serial.println("-----------------");

  // Enviar datos en formato CSV cada minuto (60000 ms)
  static unsigned long lastSaveTime = 0;
  unsigned long currentTime = millis();
  if (currentTime - lastSaveTime >= 60000) {
    Serial.print(millis()); // Timestamp en milisegundos
    Serial.print(",");
    Serial.print(a.acceleration.x);
    Serial.print(",");
    Serial.print(a.acceleration.y);
    Serial.print(",");
    Serial.print(a.acceleration.z);
    Serial.print(",");
    Serial.print(g.gyro.x);
    Serial.print(",");
    Serial.print(g.gyro.y);
    Serial.print(",");
    Serial.print(g.gyro.z);
    Serial.print(",");
    Serial.print(temp_mpu.temperature);
    Serial.print(",");
    Serial.print(pitch);
    Serial.print(",");
    Serial.print(roll);
    Serial.print(",");
    Serial.print(temp_bmp);
    Serial.print(",");
    Serial.println(pressure);
    Serial.println("Datos enviados en CSV");
    lastSaveTime = currentTime;
  }

  delay(1000); // Muestreo cada segundo
}
